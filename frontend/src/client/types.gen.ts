// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type TenantCreate = {
    name: string;
    description?: (string | null);
    code: string;
    status?: TenantStatus;
};

export type TenantPublic = {
    name: string;
    description?: (string | null);
    code: string;
    status?: TenantStatus;
    id: string;
    created_at: string;
    updated_at: string;
};

export type TenantsPublic = {
    data: Array<TenantPublic>;
    count: number;
};

export type TenantStatus = 'active' | 'inactive';

export type TenantUpdate = {
    name?: (string | null);
    description?: (string | null);
    code?: (string | null);
    status?: (TenantStatus | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type TenantsReadTenantsData = {
    limit?: number;
    /**
     * Search by name or code
     */
    search?: (string | null);
    skip?: number;
    /**
     * Filter by status (active/inactive)
     */
    status?: (string | null);
};

export type TenantsReadTenantsResponse = (TenantsPublic);

export type TenantsCreateTenantData = {
    requestBody: TenantCreate;
};

export type TenantsCreateTenantResponse = (TenantPublic);

export type TenantsReadTenantData = {
    tenantId: string;
};

export type TenantsReadTenantResponse = (TenantPublic);

export type TenantsUpdateTenantData = {
    requestBody: TenantUpdate;
    tenantId: string;
};

export type TenantsUpdateTenantResponse = (TenantPublic);

export type TenantsDeleteTenantData = {
    tenantId: string;
};

export type TenantsDeleteTenantResponse = (Message);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);

// Audit Log Types
export type AuditLogAction = 'CREATE' | 'UPDATE' | 'DELETE' | 'VIEW' | 'LOGIN' | 'LOGOUT' | 'EXPORT' | 'IMPORT' | 'ADMIN_ACTION' | 'SYSTEM_EVENT';

export type AuditLogSeverity = 'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL';

export type AuditLogEntry = {
    id: string;
    user_id?: string;
    user_email?: string;
    user_name?: string;
    session_id?: string;
    action: AuditLogAction;
    resource_type: string;
    resource_id?: string;
    timestamp: string;
    ip_address?: string;
    user_agent?: string;
    before_state?: Record<string, any>;
    after_state?: Record<string, any>;
    metadata?: Record<string, any>;
    severity: AuditLogSeverity;
    tenant_id?: string;
    message?: string;
    correlation_id?: string;
    duration_ms?: number;
    request_id?: string;
    api_endpoint?: string;
    status_code?: number;
};

export type AuditLogFilters = {
    search?: string;
    start_date?: string;
    end_date?: string;
    action?: AuditLogAction;
    resource_type?: string;
    severity?: AuditLogSeverity;
    user_id?: string;
    tenant_id?: string;
    ip_address?: string;
    correlation_id?: string;
    page?: number;
    limit?: number;
};

export type AuditLogSettings = {
    retention_days: number;
    enable_archival: boolean;
    archival_threshold_days: number;
    enable_compression: boolean;
    backup_frequency: 'daily' | 'weekly' | 'monthly';
    enable_real_time_monitoring: boolean;
    log_level: AuditLogSeverity;
    enable_export: boolean;
    max_export_records: number;
    enable_data_masking: boolean;
    tenant_isolation: boolean;
};

export type AuditLogStats = {
    total_logs: number;
    logs_today: number;
    logs_this_week: number;
    logs_this_month: number;
    by_severity: Record<AuditLogSeverity, number>;
    by_action: Record<AuditLogAction, number>;
    by_tenant: Record<string, number>;
    top_users: Array<{
        user_id: string;
        user_name: string;
        count: number;
    }>;
    top_resources: Array<{
        resource_type: string;
        count: number;
    }>;
    recent_activity: Array<{
        hour: string;
        count: number;
    }>;
};

export type TenantActivityStats = {
    tenant_id: string;
    tenant_name: string;
    total_logs: number;
    active_users: number;
    most_common_actions: Array<{
        action: AuditLogAction;
        count: number;
    }>;
    recent_activity: Array<{
        timestamp: string;
        count: number;
    }>;
};