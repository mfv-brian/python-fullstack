// This file is auto-generated by @hey-api/openapi-ts

export type AuditAction = 'CREATE' | 'UPDATE' | 'DELETE' | 'VIEW' | 'SEARCH';

export type AuditLogCreate = {
    user_id: string;
    action: AuditAction;
    resource_type: string;
    resource_id: string;
    ip_address?: (string | null);
    user_agent?: (string | null);
    before_state?: ({
    [key: string]: unknown;
} | null);
    after_state?: ({
    [key: string]: unknown;
} | null);
    custom_metadata?: ({
    [key: string]: unknown;
} | null);
    severity?: AuditSeverity;
    tenant_id: string;
    timestamp?: string;
    session_id?: (string | null);
};

export type AuditLogExport = {
    csv_data: string;
    filename: string;
};

export type AuditLogPublic = {
    user_id: string;
    action: AuditAction;
    resource_type: string;
    resource_id: string;
    ip_address?: (string | null);
    user_agent?: (string | null);
    before_state?: ({
    [key: string]: unknown;
} | null);
    after_state?: ({
    [key: string]: unknown;
} | null);
    custom_metadata?: ({
    [key: string]: unknown;
} | null);
    severity?: AuditSeverity;
    tenant_id: string;
    timestamp?: string;
    session_id?: (string | null);
    id: string;
};

export type AuditLogsPublic = {
    data: Array<AuditLogPublic>;
    count: number;
};

export type AuditLogUpdate = {
    custom_metadata?: ({
    [key: string]: unknown;
} | null);
    severity?: (AuditSeverity | null);
};

export type AuditSeverity = 'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL';

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
    created_at?: string;
    updated_at?: string;
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    created_at?: string;
    updated_at?: string;
    id: string;
    owner_id: string;
    tenant_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
    created_at?: string;
    updated_at?: string;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type TenantCreate = {
    name: string;
    description?: (string | null);
    code: string;
    status?: TenantStatus;
    max_users?: number;
    max_storage_gb?: number;
    features_enabled?: {
        [key: string]: unknown;
    };
    created_at?: string;
    updated_at?: string;
};

export type TenantPublic = {
    name: string;
    description?: (string | null);
    code: string;
    status?: TenantStatus;
    max_users?: number;
    max_storage_gb?: number;
    features_enabled?: {
        [key: string]: unknown;
    };
    created_at?: string;
    updated_at?: string;
    id: string;
};

export type TenantsPublic = {
    data: Array<TenantPublic>;
    count: number;
};

export type TenantStatus = 'active' | 'inactive';

export type TenantUpdate = {
    name?: (string | null);
    description?: (string | null);
    code?: (string | null);
    status?: (TenantStatus | null);
    max_users?: (number | null);
    max_storage_gb?: (number | null);
    features_enabled?: ({
    [key: string]: unknown;
} | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    role?: UserRole;
    last_login_at?: (string | null);
    login_count?: number;
    password: string;
    tenant_id?: (string | null);
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    role?: UserRole;
    last_login_at?: (string | null);
    login_count?: number;
    id: string;
    tenant_id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UserRole = 'admin' | 'auditor' | 'user';

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    role?: (UserRole | null);
    last_login_at?: (string | null);
    login_count?: number;
    password?: (string | null);
    tenant_id?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AuditLogsReadAuditLogsData = {
    /**
     * Filter by action type
     */
    action?: (AuditAction | null);
    /**
     * End date for filtering
     */
    endDate?: (string | null);
    limit?: number;
    /**
     * Filter by resource ID
     */
    resourceId?: (string | null);
    /**
     * Filter by resource type
     */
    resourceType?: (string | null);
    /**
     * Filter by severity level
     */
    severity?: (AuditSeverity | null);
    skip?: number;
    /**
     * Start date for filtering
     */
    startDate?: (string | null);
    /**
     * Filter by tenant ID
     */
    tenantId?: (string | null);
    /**
     * Filter by user ID
     */
    userId?: (string | null);
};

export type AuditLogsReadAuditLogsResponse = (AuditLogsPublic);

export type AuditLogsCreateAuditLogData = {
    requestBody: AuditLogCreate;
};

export type AuditLogsCreateAuditLogResponse = (AuditLogPublic);

export type AuditLogsReadAuditLogData = {
    auditLogId: string;
};

export type AuditLogsReadAuditLogResponse = (AuditLogPublic);

export type AuditLogsUpdateAuditLogData = {
    auditLogId: string;
    requestBody: AuditLogUpdate;
};

export type AuditLogsUpdateAuditLogResponse = (AuditLogPublic);

export type AuditLogsDeleteAuditLogData = {
    auditLogId: string;
};

export type AuditLogsDeleteAuditLogResponse = (Message);

export type AuditLogsExportAuditLogsCsvData = {
    /**
     * Filter by action type
     */
    action?: (AuditAction | null);
    /**
     * End date for filtering
     */
    endDate?: (string | null);
    /**
     * Filter by resource ID
     */
    resourceId?: (string | null);
    /**
     * Filter by resource type
     */
    resourceType?: (string | null);
    /**
     * Filter by severity level
     */
    severity?: (AuditSeverity | null);
    /**
     * Start date for filtering
     */
    startDate?: (string | null);
    /**
     * Filter by tenant ID
     */
    tenantId?: (string | null);
    /**
     * Filter by user ID
     */
    userId?: (string | null);
};

export type AuditLogsExportAuditLogsCsvResponse = (AuditLogExport);

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type TenantsReadTenantsData = {
    limit?: number;
    /**
     * Search by name or code
     */
    search?: (string | null);
    skip?: number;
    /**
     * Filter by status (active/inactive)
     */
    status?: (string | null);
};

export type TenantsReadTenantsResponse = (TenantsPublic);

export type TenantsCreateTenantData = {
    requestBody: TenantCreate;
};

export type TenantsCreateTenantResponse = (TenantPublic);

export type TenantsReadTenantData = {
    tenantId: string;
};

export type TenantsReadTenantResponse = (TenantPublic);

export type TenantsUpdateTenantData = {
    requestBody: TenantUpdate;
    tenantId: string;
};

export type TenantsUpdateTenantResponse = (TenantPublic);

export type TenantsDeleteTenantData = {
    tenantId: string;
};

export type TenantsDeleteTenantResponse = (Message);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UsersAdminOnlyEndpointResponse = (unknown);

export type UsersAuditorOnlyEndpointResponse = (unknown);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);

export type UtilsCheckDatabaseHealthResponse = (unknown);

export type UtilsGetDatabaseStatisticsResponse = (unknown);

export type UtilsOptimizeDatabaseEndpointResponse = (unknown);

export type UtilsVacuumDatabaseEndpointResponse = (unknown);

export type UtilsReindexDatabaseEndpointResponse = (unknown);

export type UtilsGetTenantPerformanceData = {
    tenantId: string;
};

export type UtilsGetTenantPerformanceResponse = (unknown);