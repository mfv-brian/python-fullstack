// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AuditLogsReadAuditLogsData, AuditLogsReadAuditLogsResponse, AuditLogsCreateAuditLogData, AuditLogsCreateAuditLogResponse, AuditLogsReadAuditLogData, AuditLogsReadAuditLogResponse, AuditLogsUpdateAuditLogData, AuditLogsUpdateAuditLogResponse, AuditLogsDeleteAuditLogData, AuditLogsDeleteAuditLogResponse, AuditLogsExportAuditLogsCsvData, AuditLogsExportAuditLogsCsvResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, TenantsReadTenantsData, TenantsReadTenantsResponse, TenantsCreateTenantData, TenantsCreateTenantResponse, TenantsReadTenantData, TenantsReadTenantResponse, TenantsUpdateTenantData, TenantsUpdateTenantResponse, TenantsDeleteTenantData, TenantsDeleteTenantResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UsersAdminOnlyEndpointResponse, UsersAuditorOnlyEndpointResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse, UtilsCheckDatabaseHealthResponse, UtilsGetDatabaseStatisticsResponse, UtilsOptimizeDatabaseEndpointResponse, UtilsVacuumDatabaseEndpointResponse, UtilsReindexDatabaseEndpointResponse, UtilsGetTenantPerformanceData, UtilsGetTenantPerformanceResponse } from './types.gen';

export class AuditLogsService {
    /**
     * Read Audit Logs
     * Retrieve audit logs with filtering options.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.userId Filter by user ID
     * @param data.action Filter by action type
     * @param data.resourceType Filter by resource type
     * @param data.resourceId Filter by resource ID
     * @param data.severity Filter by severity level
     * @param data.tenantId Filter by tenant ID
     * @param data.startDate Start date for filtering
     * @param data.endDate End date for filtering
     * @returns AuditLogsPublic Successful Response
     * @throws ApiError
     */
    public static readAuditLogs(data: AuditLogsReadAuditLogsData = {}): CancelablePromise<AuditLogsReadAuditLogsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/audit-logs/',
            query: {
                skip: data.skip,
                limit: data.limit,
                user_id: data.userId,
                action: data.action,
                resource_type: data.resourceType,
                resource_id: data.resourceId,
                severity: data.severity,
                tenant_id: data.tenantId,
                start_date: data.startDate,
                end_date: data.endDate
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Audit Log
     * Create new audit log entry.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AuditLogPublic Successful Response
     * @throws ApiError
     */
    public static createAuditLog(data: AuditLogsCreateAuditLogData): CancelablePromise<AuditLogsCreateAuditLogResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/audit-logs/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Audit Log
     * Get a specific audit log by id.
     * @param data The data for the request.
     * @param data.auditLogId
     * @returns AuditLogPublic Successful Response
     * @throws ApiError
     */
    public static readAuditLog(data: AuditLogsReadAuditLogData): CancelablePromise<AuditLogsReadAuditLogResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/audit-logs/{audit_log_id}',
            path: {
                audit_log_id: data.auditLogId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Audit Log
     * Update an audit log entry.
     * @param data The data for the request.
     * @param data.auditLogId
     * @param data.requestBody
     * @returns AuditLogPublic Successful Response
     * @throws ApiError
     */
    public static updateAuditLog(data: AuditLogsUpdateAuditLogData): CancelablePromise<AuditLogsUpdateAuditLogResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/audit-logs/{audit_log_id}',
            path: {
                audit_log_id: data.auditLogId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Audit Log
     * Delete an audit log entry.
     * @param data The data for the request.
     * @param data.auditLogId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteAuditLog(data: AuditLogsDeleteAuditLogData): CancelablePromise<AuditLogsDeleteAuditLogResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/audit-logs/{audit_log_id}',
            path: {
                audit_log_id: data.auditLogId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Export Audit Logs Csv
     * Export audit logs to CSV format.
     * @param data The data for the request.
     * @param data.userId Filter by user ID
     * @param data.action Filter by action type
     * @param data.resourceType Filter by resource type
     * @param data.resourceId Filter by resource ID
     * @param data.severity Filter by severity level
     * @param data.tenantId Filter by tenant ID
     * @param data.startDate Start date for filtering
     * @param data.endDate End date for filtering
     * @returns AuditLogExport Successful Response
     * @throws ApiError
     */
    public static exportAuditLogsCsv(data: AuditLogsExportAuditLogsCsvData = {}): CancelablePromise<AuditLogsExportAuditLogsCsvResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/audit-logs/export/csv',
            query: {
                user_id: data.userId,
                action: data.action,
                resource_type: data.resourceType,
                resource_id: data.resourceId,
                severity: data.severity,
                tenant_id: data.tenantId,
                start_date: data.startDate,
                end_date: data.endDate
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class TenantsService {
    /**
     * Read Tenants
     * Retrieve tenants with optional search and filtering.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.search Search by name or code
     * @param data.status Filter by status (active/inactive)
     * @returns TenantsPublic Successful Response
     * @throws ApiError
     */
    public static readTenants(data: TenantsReadTenantsData = {}): CancelablePromise<TenantsReadTenantsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tenants/',
            query: {
                skip: data.skip,
                limit: data.limit,
                search: data.search,
                status: data.status
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Tenant
     * Create new tenant.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TenantPublic Successful Response
     * @throws ApiError
     */
    public static createTenant(data: TenantsCreateTenantData): CancelablePromise<TenantsCreateTenantResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/tenants/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Tenant
     * Get a specific tenant by id.
     * @param data The data for the request.
     * @param data.tenantId
     * @returns TenantPublic Successful Response
     * @throws ApiError
     */
    public static readTenant(data: TenantsReadTenantData): CancelablePromise<TenantsReadTenantResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/tenants/{tenant_id}',
            path: {
                tenant_id: data.tenantId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Tenant
     * Update a tenant.
     * @param data The data for the request.
     * @param data.tenantId
     * @param data.requestBody
     * @returns TenantPublic Successful Response
     * @throws ApiError
     */
    public static updateTenant(data: TenantsUpdateTenantData): CancelablePromise<TenantsUpdateTenantResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/tenants/{tenant_id}',
            path: {
                tenant_id: data.tenantId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Tenant
     * Delete a tenant.
     * @param data The data for the request.
     * @param data.tenantId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteTenant(data: TenantsDeleteTenantData): CancelablePromise<TenantsDeleteTenantResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/tenants/{tenant_id}',
            path: {
                tenant_id: data.tenantId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Admin Only Endpoint
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static adminOnlyEndpoint(): CancelablePromise<UsersAdminOnlyEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/admin-only'
        });
    }
    
    /**
     * Auditor Only Endpoint
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static auditorOnlyEndpoint(): CancelablePromise<UsersAuditorOnlyEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/auditor-only'
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
    /**
     * Check Database Health
     * Check database health and connectivity.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static checkDatabaseHealth(): CancelablePromise<UtilsCheckDatabaseHealthResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/db/health'
        });
    }
    
    /**
     * Get Database Statistics
     * Get database statistics and connection pool info.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getDatabaseStatistics(): CancelablePromise<UtilsGetDatabaseStatisticsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/db/stats'
        });
    }
    
    /**
     * Optimize Database Endpoint
     * Run database optimization tasks.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static optimizeDatabaseEndpoint(): CancelablePromise<UtilsOptimizeDatabaseEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/db/optimize'
        });
    }
    
    /**
     * Vacuum Database Endpoint
     * Run VACUUM on the database.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static vacuumDatabaseEndpoint(): CancelablePromise<UtilsVacuumDatabaseEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/db/vacuum'
        });
    }
    
    /**
     * Reindex Database Endpoint
     * Reindex the database.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static reindexDatabaseEndpoint(): CancelablePromise<UtilsReindexDatabaseEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/db/reindex'
        });
    }
    
    /**
     * Get Tenant Performance
     * Get performance report for a specific tenant.
     * @param data The data for the request.
     * @param data.tenantId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getTenantPerformance(data: UtilsGetTenantPerformanceData): CancelablePromise<UtilsGetTenantPerformanceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/db/tenant/{tenant_id}/performance',
            path: {
                tenant_id: data.tenantId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}